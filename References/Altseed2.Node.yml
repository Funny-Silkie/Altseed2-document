### YamlMime:ManagedReference
items:
- uid: Altseed2.Node
  commentId: T:Altseed2.Node
  id: Node
  parent: Altseed2
  children:
  - Altseed2.Node.#ctor
  - Altseed2.Node.AddChildNode(Altseed2.Node)
  - Altseed2.Node.Children
  - Altseed2.Node.EnumerateAncestors
  - Altseed2.Node.EnumerateDescendants
  - Altseed2.Node.EnumerateDescendants``1
  - Altseed2.Node.EnumerateDescendants``1(System.Func{``0,System.Boolean})
  - Altseed2.Node.OnAdded
  - Altseed2.Node.OnRemoved
  - Altseed2.Node.OnUpdate
  - Altseed2.Node.Parent
  - Altseed2.Node.RemoveChildNode(Altseed2.Node)
  - Altseed2.Node.Status
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: Node
  fullName: Altseed2.Node
  type: Class
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: Node
    path: Src/Engine/Node/Node.cs
    startLine: 10
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nゲームシーンを構成するノードを表します。\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class Node : Registerable<Node>
    content.vb: >-
      <Serializable>

      Public Class Node
          Inherits Registerable(Of Node)
  inheritance:
  - System.Object
  - Altseed2.Registerable{Altseed2.Node}
  derivedClasses:
  - Altseed2.CameraNode
  - Altseed2.CollisionManagerNode
  - Altseed2.PostEffectNode
  - Altseed2.TransformNode
  - Altseed2.TransitionNode
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Altseed2.Node.#ctor
  commentId: M:Altseed2.Node.#ctor
  id: '#ctor'
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: Node()
  nameWithType: Node.Node()
  fullName: Altseed2.Node.Node()
  type: Constructor
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: .ctor
    path: Src/Engine/Node/Node.cs
    startLine: 16
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n<xref href=\"Altseed2.Node\" data-throw-if-not-resolved=\"false\"></xref>の新しいインスタンスを生成します。\n"
  example: []
  syntax:
    content: public Node()
    content.vb: Public Sub New
  overload: Altseed2.Node.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Node.Parent
  commentId: P:Altseed2.Node.Parent
  id: Parent
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: Node.Parent
  fullName: Altseed2.Node.Parent
  type: Property
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: Parent
    path: Src/Engine/Node/Node.cs
    startLine: 40
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n親ノードを取得または設定します。\n"
  example: []
  syntax:
    content: public Node Parent { get; }
    parameters: []
    return:
      type: Altseed2.Node
    content.vb: Public ReadOnly Property Parent As Node
  overload: Altseed2.Node.Parent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Altseed2.Node.Status
  commentId: P:Altseed2.Node.Status
  id: Status
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: Node.Status
  fullName: Altseed2.Node.Status
  type: Property
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: Status
    path: Src/Engine/Node/Node.cs
    startLine: 45
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nこのノードの登録状況を取得または設定します。\n"
  example: []
  syntax:
    content: public override sealed RegisteredStatus Status { get; }
    parameters: []
    return:
      type: Altseed2.RegisteredStatus
    content.vb: Public NotOverridable Overrides ReadOnly Property Status As RegisteredStatus
  overridden: Altseed2.Registerable{Altseed2.Node}.Status
  overload: Altseed2.Node.Status*
  modifiers.csharp:
  - public
  - override
  - sealed
  - get
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  - ReadOnly
- uid: Altseed2.Node.Children
  commentId: P:Altseed2.Node.Children
  id: Children
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: Node.Children
  fullName: Altseed2.Node.Children
  type: Property
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: Children
    path: Src/Engine/Node/Node.cs
    startLine: 119
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n子要素のコレクションを取得します。\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<Node> Children { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Altseed2.Node}
    content.vb: Public ReadOnly Property Children As ReadOnlyCollection(Of Node)
  overload: Altseed2.Node.Children*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Altseed2.Node.AddChildNode(Altseed2.Node)
  commentId: M:Altseed2.Node.AddChildNode(Altseed2.Node)
  id: AddChildNode(Altseed2.Node)
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: AddChildNode(Node)
  nameWithType: Node.AddChildNode(Node)
  fullName: Altseed2.Node.AddChildNode(Altseed2.Node)
  type: Method
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: AddChildNode
    path: Src/Engine/Node/Node.cs
    startLine: 127
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n子要素を追加します。\n"
  example: []
  syntax:
    content: public void AddChildNode(Node node)
    parameters:
    - id: node
      type: Altseed2.Node
      description: 追加する要素
    content.vb: Public Sub AddChildNode(node As Node)
  overload: Altseed2.Node.AddChildNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Node.RemoveChildNode(Altseed2.Node)
  commentId: M:Altseed2.Node.RemoveChildNode(Altseed2.Node)
  id: RemoveChildNode(Altseed2.Node)
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: RemoveChildNode(Node)
  nameWithType: Node.RemoveChildNode(Node)
  fullName: Altseed2.Node.RemoveChildNode(Altseed2.Node)
  type: Method
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: RemoveChildNode
    path: Src/Engine/Node/Node.cs
    startLine: 138
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n子要素を削除します。\n"
  example: []
  syntax:
    content: public void RemoveChildNode(Node node)
    parameters:
    - id: node
      type: Altseed2.Node
      description: 削除する要素
    content.vb: Public Sub RemoveChildNode(node As Node)
  overload: Altseed2.Node.RemoveChildNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Node.OnAdded
  commentId: M:Altseed2.Node.OnAdded
  id: OnAdded
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: OnAdded()
  nameWithType: Node.OnAdded()
  fullName: Altseed2.Node.OnAdded()
  type: Method
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: OnAdded
    path: Src/Engine/Node/Node.cs
    startLine: 155
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nエンジンに追加された時に実行します。\n"
  remarks: "\n自身もしくは親ノードがEngineに登録されたあとのUpdateの際に実行されます。\n"
  example: []
  syntax:
    content: protected virtual void OnAdded()
    content.vb: Protected Overridable Sub OnAdded
  overload: Altseed2.Node.OnAdded*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Altseed2.Node.OnRemoved
  commentId: M:Altseed2.Node.OnRemoved
  id: OnRemoved
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: OnRemoved()
  nameWithType: Node.OnRemoved()
  fullName: Altseed2.Node.OnRemoved()
  type: Method
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: OnRemoved
    path: Src/Engine/Node/Node.cs
    startLine: 163
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nエンジンから削除された時に実行します。\n"
  remarks: "\n自身もしくは親ノードがEngineにから削除されたあとのUpdateの際に実行されます。\n"
  example: []
  syntax:
    content: protected virtual void OnRemoved()
    content.vb: Protected Overridable Sub OnRemoved
  overload: Altseed2.Node.OnRemoved*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Altseed2.Node.OnUpdate
  commentId: M:Altseed2.Node.OnUpdate
  id: OnUpdate
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: OnUpdate()
  nameWithType: Node.OnUpdate()
  fullName: Altseed2.Node.OnUpdate()
  type: Method
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: OnUpdate
    path: Src/Engine/Node/Node.cs
    startLine: 168
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n自身が更新された時に実行します。\n"
  example: []
  syntax:
    content: protected virtual void OnUpdate()
    content.vb: Protected Overridable Sub OnUpdate
  overload: Altseed2.Node.OnUpdate*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Altseed2.Node.EnumerateAncestors
  commentId: M:Altseed2.Node.EnumerateAncestors
  id: EnumerateAncestors
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: EnumerateAncestors()
  nameWithType: Node.EnumerateAncestors()
  fullName: Altseed2.Node.EnumerateAncestors()
  type: Method
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: EnumerateAncestors
    path: Src/Engine/Node/Node.cs
    startLine: 247
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n先祖ノードを列挙します。\n"
  example: []
  syntax:
    content: public IEnumerable<Node> EnumerateAncestors()
    return:
      type: System.Collections.Generic.IEnumerable{Altseed2.Node}
    content.vb: Public Function EnumerateAncestors As IEnumerable(Of Node)
  overload: Altseed2.Node.EnumerateAncestors*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Node.EnumerateDescendants
  commentId: M:Altseed2.Node.EnumerateDescendants
  id: EnumerateDescendants
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: EnumerateDescendants()
  nameWithType: Node.EnumerateDescendants()
  fullName: Altseed2.Node.EnumerateDescendants()
  type: Method
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: EnumerateDescendants
    path: Src/Engine/Node/Node.cs
    startLine: 272
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n子孫ノードを列挙します。\n"
  example: []
  syntax:
    content: public IEnumerable<Node> EnumerateDescendants()
    return:
      type: System.Collections.Generic.IEnumerable{Altseed2.Node}
    content.vb: Public Function EnumerateDescendants As IEnumerable(Of Node)
  overload: Altseed2.Node.EnumerateDescendants*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Node.EnumerateDescendants``1
  commentId: M:Altseed2.Node.EnumerateDescendants``1
  id: EnumerateDescendants``1
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: EnumerateDescendants<T>()
  nameWithType: Node.EnumerateDescendants<T>()
  fullName: Altseed2.Node.EnumerateDescendants<T>()
  type: Method
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: EnumerateDescendants
    path: Src/Engine/Node/Node.cs
    startLine: 286
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code> 型の子孫ノードを列挙します。\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> EnumerateDescendants<T>()
          where T : Node
    typeParameters:
    - id: T
      description: 列挙されるノードの型
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function EnumerateDescendants(Of T As Node) As IEnumerable(Of T)
  overload: Altseed2.Node.EnumerateDescendants*
  nameWithType.vb: Node.EnumerateDescendants(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Altseed2.Node.EnumerateDescendants(Of T)()
  name.vb: EnumerateDescendants(Of T)()
- uid: Altseed2.Node.EnumerateDescendants``1(System.Func{``0,System.Boolean})
  commentId: M:Altseed2.Node.EnumerateDescendants``1(System.Func{``0,System.Boolean})
  id: EnumerateDescendants``1(System.Func{``0,System.Boolean})
  parent: Altseed2.Node
  langs:
  - csharp
  - vb
  name: EnumerateDescendants<T>(Func<T, Boolean>)
  nameWithType: Node.EnumerateDescendants<T>(Func<T, Boolean>)
  fullName: Altseed2.Node.EnumerateDescendants<T>(System.Func<T, System.Boolean>)
  type: Method
  source:
    remote:
      path: Engine/Node/Node.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: EnumerateDescendants
    path: Src/Engine/Node/Node.cs
    startLine: 298
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n<code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>型の子孫ノードのうち <code data-dev-comment-type=\"paramref\" class=\"paramref\">condition</code> を満たすものを列挙します。\n"
  example: []
  syntax:
    content: >-
      public IEnumerable<T> EnumerateDescendants<T>(Func<T, bool> condition)
          where T : Node
    parameters:
    - id: condition
      type: System.Func{{T},System.Boolean}
      description: 列挙するノードの条件
    typeParameters:
    - id: T
      description: 列挙されるノードの型
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function EnumerateDescendants(Of T As Node)(condition As Func(Of T, Boolean)) As IEnumerable(Of T)
  overload: Altseed2.Node.EnumerateDescendants*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">condition</code>がnull
  nameWithType.vb: Node.EnumerateDescendants(Of T)(Func(Of T, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Altseed2.Node.EnumerateDescendants(Of T)(System.Func(Of T, System.Boolean))
  name.vb: EnumerateDescendants(Of T)(Func(Of T, Boolean))
references:
- uid: Altseed2
  commentId: N:Altseed2
  name: Altseed2
  nameWithType: Altseed2
  fullName: Altseed2
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Altseed2.Registerable{Altseed2.Node}
  commentId: T:Altseed2.Registerable{Altseed2.Node}
  parent: Altseed2
  definition: Altseed2.Registerable`1
  name: Registerable<Node>
  nameWithType: Registerable<Node>
  fullName: Altseed2.Registerable<Altseed2.Node>
  nameWithType.vb: Registerable(Of Node)
  fullName.vb: Altseed2.Registerable(Of Altseed2.Node)
  name.vb: Registerable(Of Node)
  spec.csharp:
  - uid: Altseed2.Registerable`1
    name: Registerable
    nameWithType: Registerable
    fullName: Altseed2.Registerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Altseed2.Node
    name: Node
    nameWithType: Node
    fullName: Altseed2.Node
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Altseed2.Registerable`1
    name: Registerable
    nameWithType: Registerable
    fullName: Altseed2.Registerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Altseed2.Node
    name: Node
    nameWithType: Node
    fullName: Altseed2.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Altseed2.Registerable`1
  commentId: T:Altseed2.Registerable`1
  name: Registerable<T>
  nameWithType: Registerable<T>
  fullName: Altseed2.Registerable<T>
  nameWithType.vb: Registerable(Of T)
  fullName.vb: Altseed2.Registerable(Of T)
  name.vb: Registerable(Of T)
  spec.csharp:
  - uid: Altseed2.Registerable`1
    name: Registerable
    nameWithType: Registerable
    fullName: Altseed2.Registerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Altseed2.Registerable`1
    name: Registerable
    nameWithType: Registerable
    fullName: Altseed2.Registerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Altseed2.Node
  commentId: T:Altseed2.Node
  parent: Altseed2
  name: Node
  nameWithType: Node
  fullName: Altseed2.Node
- uid: Altseed2.Node.#ctor*
  commentId: Overload:Altseed2.Node.#ctor
  name: Node
  nameWithType: Node.Node
  fullName: Altseed2.Node.Node
- uid: Altseed2.Node.Parent*
  commentId: Overload:Altseed2.Node.Parent
  name: Parent
  nameWithType: Node.Parent
  fullName: Altseed2.Node.Parent
- uid: Altseed2.Registerable{Altseed2.Node}.Status
  commentId: P:Altseed2.Registerable{Altseed2.Node}.Status
  parent: Altseed2.Registerable{Altseed2.Node}
  definition: Altseed2.Registerable`1.Status
  name: Status
  nameWithType: Registerable<Node>.Status
  fullName: Altseed2.Registerable<Altseed2.Node>.Status
  nameWithType.vb: Registerable(Of Node).Status
  fullName.vb: Altseed2.Registerable(Of Altseed2.Node).Status
- uid: Altseed2.Node.Status*
  commentId: Overload:Altseed2.Node.Status
  name: Status
  nameWithType: Node.Status
  fullName: Altseed2.Node.Status
- uid: Altseed2.RegisteredStatus
  commentId: T:Altseed2.RegisteredStatus
  parent: Altseed2
  name: RegisteredStatus
  nameWithType: RegisteredStatus
  fullName: Altseed2.RegisteredStatus
- uid: Altseed2.Registerable`1.Status
  commentId: P:Altseed2.Registerable`1.Status
  name: Status
  nameWithType: Registerable<T>.Status
  fullName: Altseed2.Registerable<T>.Status
  nameWithType.vb: Registerable(Of T).Status
  fullName.vb: Altseed2.Registerable(Of T).Status
- uid: Altseed2.Node.Children*
  commentId: Overload:Altseed2.Node.Children
  name: Children
  nameWithType: Node.Children
  fullName: Altseed2.Node.Children
- uid: System.Collections.ObjectModel.ReadOnlyCollection{Altseed2.Node}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{Altseed2.Node}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Node>
  nameWithType: ReadOnlyCollection<Node>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<Altseed2.Node>
  nameWithType.vb: ReadOnlyCollection(Of Node)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of Altseed2.Node)
  name.vb: ReadOnlyCollection(Of Node)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Altseed2.Node
    name: Node
    nameWithType: Node
    fullName: Altseed2.Node
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Altseed2.Node
    name: Node
    nameWithType: Node
    fullName: Altseed2.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: Altseed2.Node.AddChildNode*
  commentId: Overload:Altseed2.Node.AddChildNode
  name: AddChildNode
  nameWithType: Node.AddChildNode
  fullName: Altseed2.Node.AddChildNode
- uid: Altseed2.Node.RemoveChildNode*
  commentId: Overload:Altseed2.Node.RemoveChildNode
  name: RemoveChildNode
  nameWithType: Node.RemoveChildNode
  fullName: Altseed2.Node.RemoveChildNode
- uid: Altseed2.Node.OnAdded*
  commentId: Overload:Altseed2.Node.OnAdded
  name: OnAdded
  nameWithType: Node.OnAdded
  fullName: Altseed2.Node.OnAdded
- uid: Altseed2.Node.OnRemoved*
  commentId: Overload:Altseed2.Node.OnRemoved
  name: OnRemoved
  nameWithType: Node.OnRemoved
  fullName: Altseed2.Node.OnRemoved
- uid: Altseed2.Node.OnUpdate*
  commentId: Overload:Altseed2.Node.OnUpdate
  name: OnUpdate
  nameWithType: Node.OnUpdate
  fullName: Altseed2.Node.OnUpdate
- uid: Altseed2.Node.EnumerateAncestors*
  commentId: Overload:Altseed2.Node.EnumerateAncestors
  name: EnumerateAncestors
  nameWithType: Node.EnumerateAncestors
  fullName: Altseed2.Node.EnumerateAncestors
- uid: System.Collections.Generic.IEnumerable{Altseed2.Node}
  commentId: T:System.Collections.Generic.IEnumerable{Altseed2.Node}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Node>
  nameWithType: IEnumerable<Node>
  fullName: System.Collections.Generic.IEnumerable<Altseed2.Node>
  nameWithType.vb: IEnumerable(Of Node)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Altseed2.Node)
  name.vb: IEnumerable(Of Node)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Altseed2.Node
    name: Node
    nameWithType: Node
    fullName: Altseed2.Node
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Altseed2.Node
    name: Node
    nameWithType: Node
    fullName: Altseed2.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Altseed2.Node.EnumerateDescendants*
  commentId: Overload:Altseed2.Node.EnumerateDescendants
  name: EnumerateDescendants
  nameWithType: Node.EnumerateDescendants
  fullName: Altseed2.Node.EnumerateDescendants
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, Boolean>
  nameWithType: Func<T, Boolean>
  fullName: System.Func<T, System.Boolean>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, System.Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
