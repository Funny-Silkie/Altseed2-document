### YamlMime:ManagedReference
items:
- uid: Altseed2.Joystick
  commentId: T:Altseed2.Joystick
  id: Joystick
  parent: Altseed2
  children:
  - Altseed2.Joystick.ConnectedJoystickCount
  - Altseed2.Joystick.GetAxisState(System.Int32,Altseed2.JoystickAxis)
  - Altseed2.Joystick.GetAxisState(System.Int32,System.Int32)
  - Altseed2.Joystick.GetButtonState(System.Int32,Altseed2.JoystickButton)
  - Altseed2.Joystick.GetButtonState(System.Int32,System.Int32)
  - Altseed2.Joystick.GetJoystickInfo(System.Int32)
  - Altseed2.Joystick.IsPresent(System.Int32)
  - Altseed2.Joystick.MaxCount
  langs:
  - csharp
  - vb
  name: Joystick
  nameWithType: Joystick
  fullName: Altseed2.Joystick
  type: Class
  source:
    remote:
      path: Engine/CorePartial/Joystick.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: Joystick
    path: Src/Engine/CorePartial/Joystick.cs
    startLine: 2
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nジョイスティックを表すクラス\n"
  example: []
  syntax:
    content: public sealed class Joystick
    content.vb: Public NotInheritable Class Joystick
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Altseed2.Joystick.ConnectedJoystickCount
  commentId: P:Altseed2.Joystick.ConnectedJoystickCount
  id: ConnectedJoystickCount
  parent: Altseed2.Joystick
  langs:
  - csharp
  - vb
  name: ConnectedJoystickCount
  nameWithType: Joystick.ConnectedJoystickCount
  fullName: Altseed2.Joystick.ConnectedJoystickCount
  type: Property
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: ConnectedJoystickCount
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 4515
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n接続されているジョイスティックの数を取得します。\n"
  example: []
  syntax:
    content: public int ConnectedJoystickCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ConnectedJoystickCount As Integer
  overload: Altseed2.Joystick.ConnectedJoystickCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Altseed2.Joystick.IsPresent(System.Int32)
  commentId: M:Altseed2.Joystick.IsPresent(System.Int32)
  id: IsPresent(System.Int32)
  parent: Altseed2.Joystick
  langs:
  - csharp
  - vb
  name: IsPresent(Int32)
  nameWithType: Joystick.IsPresent(Int32)
  fullName: Altseed2.Joystick.IsPresent(System.Int32)
  type: Method
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: IsPresent
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 4539
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n指定したジョイスティックが存在しているかどうかを取得します。\n"
  example: []
  syntax:
    content: public bool IsPresent(int joystickIndex)
    parameters:
    - id: joystickIndex
      type: System.Int32
      description: ジョイスティックのインデックス
    return:
      type: System.Boolean
      description: 指定したジョイスティックが存在したらtrue，存在していなかったらfalse
    content.vb: Public Function IsPresent(joystickIndex As Integer) As Boolean
  overload: Altseed2.Joystick.IsPresent*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Joystick.GetJoystickInfo(System.Int32)
  commentId: M:Altseed2.Joystick.GetJoystickInfo(System.Int32)
  id: GetJoystickInfo(System.Int32)
  parent: Altseed2.Joystick
  langs:
  - csharp
  - vb
  name: GetJoystickInfo(Int32)
  nameWithType: Joystick.GetJoystickInfo(Int32)
  fullName: Altseed2.Joystick.GetJoystickInfo(System.Int32)
  type: Method
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: GetJoystickInfo
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 4549
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n指定したジョイスティックの情報を取得します。\n"
  example: []
  syntax:
    content: public JoystickInfo GetJoystickInfo(int joystickIndex)
    parameters:
    - id: joystickIndex
      type: System.Int32
      description: ジョイスティックのインデックス
    return:
      type: Altseed2.JoystickInfo
    content.vb: Public Function GetJoystickInfo(joystickIndex As Integer) As JoystickInfo
  overload: Altseed2.Joystick.GetJoystickInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Joystick.MaxCount
  commentId: P:Altseed2.Joystick.MaxCount
  id: MaxCount
  parent: Altseed2.Joystick
  langs:
  - csharp
  - vb
  name: MaxCount
  nameWithType: Joystick.MaxCount
  fullName: Altseed2.Joystick.MaxCount
  type: Property
  source:
    remote:
      path: Engine/CorePartial/Joystick.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: MaxCount
    path: Src/Engine/CorePartial/Joystick.cs
    startLine: 7
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nジョイスティックの最大同時接続数を取得します。\n"
  example: []
  syntax:
    content: public int MaxCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MaxCount As Integer
  overload: Altseed2.Joystick.MaxCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Altseed2.Joystick.GetButtonState(System.Int32,System.Int32)
  commentId: M:Altseed2.Joystick.GetButtonState(System.Int32,System.Int32)
  id: GetButtonState(System.Int32,System.Int32)
  parent: Altseed2.Joystick
  langs:
  - csharp
  - vb
  name: GetButtonState(Int32, Int32)
  nameWithType: Joystick.GetButtonState(Int32, Int32)
  fullName: Altseed2.Joystick.GetButtonState(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Engine/CorePartial/Joystick.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: GetButtonState
    path: Src/Engine/CorePartial/Joystick.cs
    startLine: 15
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nボタンの状態をインデックスで取得します。\n"
  example: []
  syntax:
    content: public ButtonState GetButtonState(int joystickIndex, int buttonIndex)
    parameters:
    - id: joystickIndex
      type: System.Int32
      description: 検索するジョイスティックのインデックス
    - id: buttonIndex
      type: System.Int32
      description: 状態を検索するボタンのインデックス
    return:
      type: Altseed2.ButtonState
      description: 指定インデックスのボタンの状態
    content.vb: Public Function GetButtonState(joystickIndex As Integer, buttonIndex As Integer) As ButtonState
  overload: Altseed2.Joystick.GetButtonState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Joystick.GetButtonState(System.Int32,Altseed2.JoystickButton)
  commentId: M:Altseed2.Joystick.GetButtonState(System.Int32,Altseed2.JoystickButton)
  id: GetButtonState(System.Int32,Altseed2.JoystickButton)
  parent: Altseed2.Joystick
  langs:
  - csharp
  - vb
  name: GetButtonState(Int32, JoystickButton)
  nameWithType: Joystick.GetButtonState(Int32, JoystickButton)
  fullName: Altseed2.Joystick.GetButtonState(System.Int32, Altseed2.JoystickButton)
  type: Method
  source:
    remote:
      path: Engine/CorePartial/Joystick.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: GetButtonState
    path: Src/Engine/CorePartial/Joystick.cs
    startLine: 24
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nボタンの状態を種類から取得します。\n"
  example: []
  syntax:
    content: public ButtonState GetButtonState(int joystickIndex, JoystickButton type)
    parameters:
    - id: joystickIndex
      type: System.Int32
      description: 検索するジョイスティックのインデックス
    - id: type
      type: Altseed2.JoystickButton
      description: 状態を検索するボタンの種類
    return:
      type: Altseed2.ButtonState
      description: 指定種類のボタンの状態
    content.vb: Public Function GetButtonState(joystickIndex As Integer, type As JoystickButton) As ButtonState
  overload: Altseed2.Joystick.GetButtonState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Joystick.GetAxisState(System.Int32,System.Int32)
  commentId: M:Altseed2.Joystick.GetAxisState(System.Int32,System.Int32)
  id: GetAxisState(System.Int32,System.Int32)
  parent: Altseed2.Joystick
  langs:
  - csharp
  - vb
  name: GetAxisState(Int32, Int32)
  nameWithType: Joystick.GetAxisState(Int32, Int32)
  fullName: Altseed2.Joystick.GetAxisState(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Engine/CorePartial/Joystick.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: GetAxisState
    path: Src/Engine/CorePartial/Joystick.cs
    startLine: 33
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n軸の状態をインデックスで取得します。\n"
  example: []
  syntax:
    content: public float GetAxisState(int joystickIndex, int axisIndex)
    parameters:
    - id: joystickIndex
      type: System.Int32
      description: 検索するジョイスティックのインデックス
    - id: axisIndex
      type: System.Int32
      description: 状態を検索する軸のインデックス
    return:
      type: System.Single
      description: 指定インデックスの軸の状態
    content.vb: Public Function GetAxisState(joystickIndex As Integer, axisIndex As Integer) As Single
  overload: Altseed2.Joystick.GetAxisState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.Joystick.GetAxisState(System.Int32,Altseed2.JoystickAxis)
  commentId: M:Altseed2.Joystick.GetAxisState(System.Int32,Altseed2.JoystickAxis)
  id: GetAxisState(System.Int32,Altseed2.JoystickAxis)
  parent: Altseed2.Joystick
  langs:
  - csharp
  - vb
  name: GetAxisState(Int32, JoystickAxis)
  nameWithType: Joystick.GetAxisState(Int32, JoystickAxis)
  fullName: Altseed2.Joystick.GetAxisState(System.Int32, Altseed2.JoystickAxis)
  type: Method
  source:
    remote:
      path: Engine/CorePartial/Joystick.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: GetAxisState
    path: Src/Engine/CorePartial/Joystick.cs
    startLine: 42
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n軸の状態を軸の種類で取得します。\n"
  example: []
  syntax:
    content: public float GetAxisState(int joystickIndex, JoystickAxis type)
    parameters:
    - id: joystickIndex
      type: System.Int32
      description: 検索するジョイスティックのインデックス
    - id: type
      type: Altseed2.JoystickAxis
      description: 状態を検索する軸の種類
    return:
      type: System.Single
      description: 指定種類の軸の状態
    content.vb: Public Function GetAxisState(joystickIndex As Integer, type As JoystickAxis) As Single
  overload: Altseed2.Joystick.GetAxisState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Altseed2
  commentId: N:Altseed2
  name: Altseed2
  nameWithType: Altseed2
  fullName: Altseed2
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Altseed2.Joystick.ConnectedJoystickCount*
  commentId: Overload:Altseed2.Joystick.ConnectedJoystickCount
  name: ConnectedJoystickCount
  nameWithType: Joystick.ConnectedJoystickCount
  fullName: Altseed2.Joystick.ConnectedJoystickCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Altseed2.Joystick.IsPresent*
  commentId: Overload:Altseed2.Joystick.IsPresent
  name: IsPresent
  nameWithType: Joystick.IsPresent
  fullName: Altseed2.Joystick.IsPresent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Altseed2.Joystick.GetJoystickInfo*
  commentId: Overload:Altseed2.Joystick.GetJoystickInfo
  name: GetJoystickInfo
  nameWithType: Joystick.GetJoystickInfo
  fullName: Altseed2.Joystick.GetJoystickInfo
- uid: Altseed2.JoystickInfo
  commentId: T:Altseed2.JoystickInfo
  parent: Altseed2
  name: JoystickInfo
  nameWithType: JoystickInfo
  fullName: Altseed2.JoystickInfo
- uid: Altseed2.Joystick.MaxCount*
  commentId: Overload:Altseed2.Joystick.MaxCount
  name: MaxCount
  nameWithType: Joystick.MaxCount
  fullName: Altseed2.Joystick.MaxCount
- uid: Altseed2.Joystick.GetButtonState*
  commentId: Overload:Altseed2.Joystick.GetButtonState
  name: GetButtonState
  nameWithType: Joystick.GetButtonState
  fullName: Altseed2.Joystick.GetButtonState
- uid: Altseed2.ButtonState
  commentId: T:Altseed2.ButtonState
  parent: Altseed2
  name: ButtonState
  nameWithType: ButtonState
  fullName: Altseed2.ButtonState
- uid: Altseed2.JoystickButton
  commentId: T:Altseed2.JoystickButton
  parent: Altseed2
  name: JoystickButton
  nameWithType: JoystickButton
  fullName: Altseed2.JoystickButton
- uid: Altseed2.Joystick.GetAxisState*
  commentId: Overload:Altseed2.Joystick.GetAxisState
  name: GetAxisState
  nameWithType: Joystick.GetAxisState
  fullName: Altseed2.Joystick.GetAxisState
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Altseed2.JoystickAxis
  commentId: T:Altseed2.JoystickAxis
  parent: Altseed2
  name: JoystickAxis
  nameWithType: JoystickAxis
  fullName: Altseed2.JoystickAxis
