### YamlMime:ManagedReference
items:
- uid: Altseed2.File
  commentId: T:Altseed2.File
  id: File
  parent: Altseed2
  children:
  - Altseed2.File.AddRootDirectory(System.String)
  - Altseed2.File.AddRootPackage(System.String)
  - Altseed2.File.AddRootPackageWithPassword(System.String,System.String)
  - Altseed2.File.ClearRootDirectories
  - Altseed2.File.Exists(System.String)
  - Altseed2.File.Pack(System.String,System.String)
  - Altseed2.File.PackWithPassword(System.String,System.String,System.String)
  langs:
  - csharp
  - vb
  name: File
  nameWithType: File
  fullName: Altseed2.File
  type: Class
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: File
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 12652
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nファイル制御を行うクラス\n"
  example: []
  syntax:
    content: public sealed class File
    content.vb: Public NotInheritable Class File
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Altseed2.File.AddRootDirectory(System.String)
  commentId: M:Altseed2.File.AddRootDirectory(System.String)
  id: AddRootDirectory(System.String)
  parent: Altseed2.File
  langs:
  - csharp
  - vb
  name: AddRootDirectory(String)
  nameWithType: File.AddRootDirectory(String)
  fullName: Altseed2.File.AddRootDirectory(System.String)
  type: Method
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: AddRootDirectory
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 12752
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nファイル読み込み時に自動的に保管されるディレクトリを追加します。\n"
  example: []
  syntax:
    content: public bool AddRootDirectory(string path)
    parameters:
    - id: path
      type: System.String
      description: 追加するディレクトリ
    return:
      type: System.Boolean
      description: 追加処理がうまくいったらtrue，それ以外でfalse
    content.vb: Public Function AddRootDirectory(path As String) As Boolean
  overload: Altseed2.File.AddRootDirectory*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">path</code>がnull
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.File.AddRootPackageWithPassword(System.String,System.String)
  commentId: M:Altseed2.File.AddRootPackageWithPassword(System.String,System.String)
  id: AddRootPackageWithPassword(System.String,System.String)
  parent: Altseed2.File
  langs:
  - csharp
  - vb
  name: AddRootPackageWithPassword(String, String)
  nameWithType: File.AddRootPackageWithPassword(String, String)
  fullName: Altseed2.File.AddRootPackageWithPassword(System.String, System.String)
  type: Method
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: AddRootPackageWithPassword
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 12766
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nファイルパッケージをパスワード有りで読み込む\n"
  example: []
  syntax:
    content: public bool AddRootPackageWithPassword(string path, string password)
    parameters:
    - id: path
      type: System.String
      description: 読み込むファイルパッケージのパス
    - id: password
      type: System.String
      description: 読み込むファイルパッケージのパスワード
    return:
      type: System.Boolean
      description: 読み込み処理がうまくいったらtrue，それ以外でfalse
    content.vb: Public Function AddRootPackageWithPassword(path As String, password As String) As Boolean
  overload: Altseed2.File.AddRootPackageWithPassword*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">path</code>, <code data-dev-comment-type="paramref" class="paramref">password</code>のいずれかがnull
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.File.AddRootPackage(System.String)
  commentId: M:Altseed2.File.AddRootPackage(System.String)
  id: AddRootPackage(System.String)
  parent: Altseed2.File
  langs:
  - csharp
  - vb
  name: AddRootPackage(String)
  nameWithType: File.AddRootPackage(String)
  fullName: Altseed2.File.AddRootPackage(System.String)
  type: Method
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: AddRootPackage
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 12780
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\nファイルパッケージをパスワード無しで読み込む\n"
  example: []
  syntax:
    content: public bool AddRootPackage(string path)
    parameters:
    - id: path
      type: System.String
      description: 読み込むファイルパッケージのパス
    return:
      type: System.Boolean
      description: 読み込み処理がうまくいったらtrue，それ以外でfalse
    content.vb: Public Function AddRootPackage(path As String) As Boolean
  overload: Altseed2.File.AddRootPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">path</code>がnull
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.File.ClearRootDirectories
  commentId: M:Altseed2.File.ClearRootDirectories
  id: ClearRootDirectories
  parent: Altseed2.File
  langs:
  - csharp
  - vb
  name: ClearRootDirectories()
  nameWithType: File.ClearRootDirectories()
  fullName: Altseed2.File.ClearRootDirectories()
  type: Method
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: ClearRootDirectories
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 12790
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n追加されたディレクトリやファイルパッケージをすべて削除します。\n"
  example: []
  syntax:
    content: public void ClearRootDirectories()
    content.vb: Public Sub ClearRootDirectories
  overload: Altseed2.File.ClearRootDirectories*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.File.Exists(System.String)
  commentId: M:Altseed2.File.Exists(System.String)
  id: Exists(System.String)
  parent: Altseed2.File
  langs:
  - csharp
  - vb
  name: Exists(String)
  nameWithType: File.Exists(String)
  fullName: Altseed2.File.Exists(System.String)
  type: Method
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: Exists
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 12800
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n指定したファイルが存在するかどうかを検索します。\n"
  example: []
  syntax:
    content: public bool Exists(string path)
    parameters:
    - id: path
      type: System.String
      description: 存在を確認するファイルのパス
    return:
      type: System.Boolean
      description: pathの示すファイルが存在していたらtrue，それ以外でfalse
    content.vb: Public Function Exists(path As String) As Boolean
  overload: Altseed2.File.Exists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.File.Pack(System.String,System.String)
  commentId: M:Altseed2.File.Pack(System.String,System.String)
  id: Pack(System.String,System.String)
  parent: Altseed2.File
  langs:
  - csharp
  - vb
  name: Pack(String, String)
  nameWithType: File.Pack(String, String)
  fullName: Altseed2.File.Pack(System.String, System.String)
  type: Method
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: Pack
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 12813
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n指定したディレクトリのファイルをパックする\n"
  example: []
  syntax:
    content: public bool Pack(string srcPath, string dstPath)
    parameters:
    - id: srcPath
      type: System.String
      description: パックするファイルのディレクトリ
    - id: dstPath
      type: System.String
      description: パックされたファイル名
    return:
      type: System.Boolean
      description: パック処理がうまくいったらtrue，それ以外でfalse
    content.vb: Public Function Pack(srcPath As String, dstPath As String) As Boolean
  overload: Altseed2.File.Pack*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">srcPath</code>, <code data-dev-comment-type="paramref" class="paramref">dstPath</code>のいずれかがnull
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Altseed2.File.PackWithPassword(System.String,System.String,System.String)
  commentId: M:Altseed2.File.PackWithPassword(System.String,System.String,System.String)
  id: PackWithPassword(System.String,System.String,System.String)
  parent: Altseed2.File
  langs:
  - csharp
  - vb
  name: PackWithPassword(String, String, String)
  nameWithType: File.PackWithPassword(String, String, String)
  fullName: Altseed2.File.PackWithPassword(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: Engine/AutoGeneratedCoreBindings.cs
      branch: bca2a8ec4d1342197d3f85b9007ee6da648523a2
      repo: https://github.com/altseed/altseed2-csharp.git
    id: PackWithPassword
    path: Src/Engine/AutoGeneratedCoreBindings.cs
    startLine: 12829
  assemblies:
  - Altseed2
  namespace: Altseed2
  summary: "\n指定したディレクトリのファイルをパスワード付きでパックする\n"
  example: []
  syntax:
    content: public bool PackWithPassword(string srcPath, string dstPath, string password)
    parameters:
    - id: srcPath
      type: System.String
      description: パックするファイルのディレクトリ
    - id: dstPath
      type: System.String
      description: パックされたファイル名
    - id: password
      type: System.String
      description: かけるパスワード
    return:
      type: System.Boolean
      description: パック処理がうまくいったらtrue，それ以外でfalse
    content.vb: Public Function PackWithPassword(srcPath As String, dstPath As String, password As String) As Boolean
  overload: Altseed2.File.PackWithPassword*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">srcPath</code>, <code data-dev-comment-type="paramref" class="paramref">dstPath</code>, <code data-dev-comment-type="paramref" class="paramref">password</code>のいずれかがnull
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Altseed2
  commentId: N:Altseed2
  name: Altseed2
  nameWithType: Altseed2
  fullName: Altseed2
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Altseed2.File.AddRootDirectory*
  commentId: Overload:Altseed2.File.AddRootDirectory
  name: AddRootDirectory
  nameWithType: File.AddRootDirectory
  fullName: Altseed2.File.AddRootDirectory
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Altseed2.File.AddRootPackageWithPassword*
  commentId: Overload:Altseed2.File.AddRootPackageWithPassword
  name: AddRootPackageWithPassword
  nameWithType: File.AddRootPackageWithPassword
  fullName: Altseed2.File.AddRootPackageWithPassword
- uid: Altseed2.File.AddRootPackage*
  commentId: Overload:Altseed2.File.AddRootPackage
  name: AddRootPackage
  nameWithType: File.AddRootPackage
  fullName: Altseed2.File.AddRootPackage
- uid: Altseed2.File.ClearRootDirectories*
  commentId: Overload:Altseed2.File.ClearRootDirectories
  name: ClearRootDirectories
  nameWithType: File.ClearRootDirectories
  fullName: Altseed2.File.ClearRootDirectories
- uid: Altseed2.File.Exists*
  commentId: Overload:Altseed2.File.Exists
  name: Exists
  nameWithType: File.Exists
  fullName: Altseed2.File.Exists
- uid: Altseed2.File.Pack*
  commentId: Overload:Altseed2.File.Pack
  name: Pack
  nameWithType: File.Pack
  fullName: Altseed2.File.Pack
- uid: Altseed2.File.PackWithPassword*
  commentId: Overload:Altseed2.File.PackWithPassword
  name: PackWithPassword
  nameWithType: File.PackWithPassword
  fullName: Altseed2.File.PackWithPassword
